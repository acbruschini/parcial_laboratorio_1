#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "utn.h"
#include "Cliente.h"
#include "Publicacion.h"


/**
 * \brief Imprime los datos de un publicacion
 * \param pElemento Puntero al producto que se busca imprimir
 * \return Retorna 0 (EXITO) y -1 (ERROR)
 *
 */
int pub_imprimir(Publicacion* pElemento)
{
	int retorno=-1;
	if(pElemento != NULL && pElemento->isEmpty == 0)
	{
		retorno=0;
		printf("\nPUBLICACION ID: %d - TEXTO: %s - RUBRO: %d - ID CLIENTE: %d - ESTADO: %d",pElemento->id,pElemento->texto,pElemento->rubro,pElemento->idCliente,pElemento->estado);
	}
	return retorno;
}

/**
 * \brief Imprime el array de publicaciones
 * \param array Array de publicaciones a ser actualizado
 * \param limite Limite del array de publicaciones
 * \return Retorna 0 (EXITO) y -1 (ERROR)
 *
 */
int pub_imprimirArray(Publicacion* array,int limite)
{
	int respuesta = -1;
	int i;
	if(array != NULL && limite > 0)
	{
		respuesta = 0;
		for(i=0;i<limite;i++)
		{
			pub_imprimir(&array[i]);
		}
	}
	return respuesta;
}

/**
 * \brief Inicializa el array
 * \param array Array de publicaciones a ser actualizado
 * \param limite Limite del array de publicaciones
 * \return Retorna 0 (EXITO) y -1 (ERROR)
 *
 */
int pub_inicializarArray(Publicacion* array,int limite)
{
	int respuesta = -1;
	int i;
	if(array != NULL && limite > 0)
	{
		respuesta = 0;
		for(i=0;i<limite;i++)
		{
			array[i].isEmpty = 1;
		}
	}
	return respuesta;
}

/**
 * \brief Da de alta un publicacion en una posicion del array
 * \param array Array de publicaciones a ser actualizado
 * \param limite Limite del array de publicaciones
 * \param indice Posicion a ser actualizada
 * \param id Identificador a ser asignado al publicacion
 * \return Retorna 0 (EXITO) y -1 (ERROR)
 *
 */
int pub_altaArray(Publicacion* array,int limite,Cliente* arrayClientes,int limiteClientes,int indice, int* id)
{
	int respuesta = -1;
	Publicacion bufferPublicacion;



	if(array != NULL && limite > 0 && indice < limite && indice >= 0 && id != NULL)
	{
		if(	!cli_imprimirArray(arrayClientes, limiteClientes) &&
			!utn_getNumero(&bufferPublicacion.idCliente,"\nIngrese el numero ID Cliente: ","\nERROR\n",1,1000,2) &&
			cli_buscarId(arrayClientes, limiteClientes, bufferPublicacion.idCliente) >= 0 &&
			!utn_getNumero(&bufferPublicacion.rubro,"\nIngrese el numero de Rubro: ","\nERROR\n",1,1000,2) &&
			!utn_getDescripcion(bufferPublicacion.texto,TEXTO_LEN,"\nIngrese el Texto de la Publiacion: ","\nERROR\n",2))
		{
			respuesta = 0;
			bufferPublicacion.id = *id;
			bufferPublicacion.isEmpty = 0;
			bufferPublicacion.estado = 1;
			array[indice] = bufferPublicacion;
			printf ("\nSe ingreso una nueva contratacion con el ID: %d",bufferPublicacion.id);
			(*id)++;
		}
		else
		{
			printf ("\nEl Cliente no existe!");
		}

	}
	return respuesta;
}

/**
 * \brief Actualiza los datos de un publicacion en una posicion del array
 * \param array Array de publicaciones a ser actualizado
 * \param limite Limite del array de publicaciones
 * \param indice Posicion a ser actualizada
 * \return Retorna 0 (EXITO) y -1 (ERROR)
 *
 */
int pub_modificarArray(Publicacion* array,int limite, int indice)
{
	int respuesta = -1;
	Publicacion bufferPublicacion;

	if(array != NULL && limite > 0 && indice < limite && indice >= 0 && array[indice].isEmpty == 0)
	{
		if(	!utn_getDescripcion(bufferPublicacion.texto,TEXTO_LEN,"\nIngrese el Texto de la Publiacion: ","\nERROR\n",2) &&
			!utn_getNumero(&bufferPublicacion.rubro,"\nIngrese el numero de Rubro: ","\nERROR\n",1000,1,2) &&
			!utn_getNumero(&bufferPublicacion.idCliente,"\nIngrese el numero ID Cliente: ","\nERROR\n",1000,1,2) &&
			!utn_getNumero(&bufferPublicacion.estado,"\nIngrese el nestado: ","\nERROR\n",0,1,2))
		{
			respuesta = 0;
			bufferPublicacion.id = array[indice].id;
			bufferPublicacion.isEmpty = 0;
			array[indice] = bufferPublicacion;
		}
	}
	return respuesta;
}

/**
 * \brief Actualiza una posicion del array
 * \param array Array de publicaciones a ser actualizado
 * \param limite Limite del array de publicaciones
 * \param indice Posicion a ser actualizada
 * \return Retorna 0 (EXITO) y -1 (ERROR)
 *
 */
int pub_bajaArray(Publicacion* array,int limite, int indice)
{
	int respuesta = -1;
	if(array != NULL && limite > 0 && indice < limite && indice >= 0 && array[indice].isEmpty == 0)
	{
		array[indice].isEmpty = 1;
		respuesta = 0;
	}
	return respuesta;
}


/** \brief Busca un ID en un array y devuelve la posicion en que se encuentra
* \param array publicacion Array de publicacion
* \param limite int TamaÃ±o del array
* \param posicion int* Puntero a la posicion del array donde se encuentra el valor buscado
* \return int Return (-1) si no encuentra el valor buscado o Error [Invalid length or NULL pointer] - (0) si encuentra el valor buscado
*
*/
int pub_buscarId(Publicacion array[], int limite, int valorBuscado)
{
	int respuesta = -1;
	int i;
	if(array != NULL && limite > 0 && valorBuscado >= 0)
	{
		respuesta = 0;
		for(i=0;i<limite;i++)
		{
			if(array[i].id == valorBuscado)
			{
				respuesta = i;
				break;
			}
		}
	}
	return respuesta;
}

/**
 * \brief Buscar primer posicion vacia
 * \param array Array de publicaciones
 * \param limite Limite del array de publicaciones
 * \return Retorna el incice de la posicion vacia y -1 (ERROR)
 *
 */
int pub_getEmptyIndex(Publicacion* array,int limite)
{
	int respuesta = -1;
	int i;
	if(array != NULL && limite > 0)
	{
		respuesta = 0;
		for(i=0;i<limite;i++)
		{
			if(array[i].isEmpty == 1)
			{
				respuesta = i;
				break;
			}
		}
	}
	return respuesta;
}

/**
 * \brief Da de alta FORZADA un publicacion en una posicion del array
 * \param array Array de publicaciones a ser actualizado
 * \param limite Limite del array de publicaciones
 * \param indice Posicion a ser actualizada
 * \param id Identificador a ser asignado al publicacion
 * \return Retorna 0 (EXITO) y -1 (ERROR)
 *
 */
int pub_altaForzadaArray(Publicacion* array,int limite,Cliente* arrayClientes,int limiteClientes,int indice, int* id, int idCliente, int rubro, char* texto)
{
	int respuesta = -1;
	Publicacion bufferPublicacion;



	if(array != NULL && limite > 0 && indice < limite && indice >= 0 && id != NULL && idCliente >= 0 && rubro >= 0 && texto != NULL)
	{

			respuesta = 0;
			bufferPublicacion.idCliente = idCliente;
			bufferPublicacion.rubro = rubro;
			strncpy(bufferPublicacion.texto,texto,TEXTO_LEN);
			bufferPublicacion.id = *id;
			bufferPublicacion.isEmpty = 0;
			bufferPublicacion.estado = 1;
			array[indice] = bufferPublicacion;
			(*id)++;


	}
	return respuesta;
}
